import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import cv2
import pytesseract
import pandas as pd
from PIL import Image
import io
import re
from datetime import datetime
from advanced_stats import AdvancedStatistics  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–ª–∞—Å—Å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE = "data_results.xlsx"
BOT_TOKEN = "7870831167:AAEfFVkPa4bavSwdg-8wwZxuh6X9IRX0Mfs"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!

class DataProcessor:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.advanced_stats = AdvancedStatistics(excel_file)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        self._init_excel_file()
    
    def _init_excel_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
        if not os.path.exists(self.excel_file):
            df = pd.DataFrame(columns=[
                'date', 'user_id', 'username', 
                'numbers', 'scores', 'text_data',
                'best_score', 'worst_score', 'average_score'
            ])
            df.to_excel(self.excel_file, index=False)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª: {self.excel_file}")
    
    def extract_data_from_image(self, image_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
        try:
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = cv2.imread(image_path)
            if img is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ grayscale
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
            gray = cv2.medianBlur(gray, 3)
            gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏
            print("üìñ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Tesseract...")
            text = pytesseract.image_to_string(gray, lang='rus+eng')
            print(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ
            numbers = re.findall(r'\d+\.?\d*', text)
            print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª: {numbers}")
            
            # –ü–æ–∏—Å–∫ –æ—Ü–µ–Ω–æ–∫/–±–∞–ª–ª–æ–≤
            scores = []
            for num in numbers:
                try:
                    score = float(num)
                    if 0 <= score <= 100:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 0 –¥–æ 100
                        scores.append(score)
                except:
                    continue
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {scores}")
            
            return {
                'text': text,
                'numbers': numbers,
                'scores': scores,
                'clean_text': self._clean_text(text)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        text = ' '.join(text.split())
        return text[:500]
    
    def save_to_excel(self, data, user_info):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        try:
            df = pd.read_excel(self.excel_file)
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
            scores = data['scores']
            best_score = max(scores) if scores else 0
            worst_score = min(scores) if scores else 0
            average_score = sum(scores) / len(scores) if scores else 0
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_row = {
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'user_id': user_info['id'],
                'username': user_info.get('username', 'Unknown'),
                'numbers': str(data['numbers']),
                'scores': str(data['scores']),
                'text_data': data['clean_text'],
                'best_score': best_score,
                'worst_score': worst_score,
                'average_score': round(average_score, 2)
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_excel(self.excel_file, index=False)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
processor = DataProcessor(EXCEL_FILE)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤!

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏ —è:
‚Ä¢ –ò–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR
‚Ä¢ –ù–∞–π–¥—É —á–∏—Å–ª–∞ –∏ –æ—Ü–µ–Ω–∫–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –≤—Å—ë –≤ Excel —Ç–∞–±–ª–∏—Ü—É

üìä –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/statistics - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/my_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/statistics - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
/my_stats - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –æ—Ü–µ–Ω–∫–∞–º–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤)
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–æ—Ç—É –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ
    """
    await update.message.reply_text(help_text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    try:
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        temp_file = f"temp_photo_{update.message.message_id}.jpg"
        await photo_file.download_to_drive(temp_file)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        extracted_data = processor.extract_data_from_image(temp_file)
        
        if not extracted_data:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            if os.path.exists(temp_file):
                os.remove(temp_file)
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        user = update.message.from_user
        user_info = {'id': user.id, 'username': user.username or user.first_name}
        success = processor.save_to_excel(extracted_data, user_info)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if success:
            scores_text = ", ".join(map(str, extracted_data['scores'])) if extracted_data['scores'] else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            response = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!

üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª: {len(extracted_data['numbers'])}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {len(extracted_data['scores'])}
‚Ä¢ –û—Ü–µ–Ω–∫–∏: {scores_text}

üíæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
            """
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        
        await processing_msg.edit_text(response)
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(temp_file):
            os.remove(temp_file)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistics - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        df = pd.read_excel(EXCEL_FILE)
        
        if df.empty:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_records = len(df)
        best_scores = df['best_score'].dropna()
        
        if best_scores.empty:
            await update.message.reply_text("üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        response = f"""
üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_scores.max():.1f}
üìâ –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {df['worst_score'].min():.1f}
üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {df['average_score'].mean():.1f}

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /detailed_stats
        """
        await update.message.reply_text(response)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ statistics: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /detailed_stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        await update.message.reply_text("üìä –§–æ—Ä–º–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedStatistics –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report = processor.advanced_stats.generate_detailed_report()
        await update.message.reply_text(report)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ detailed_stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")

async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_stats - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        user = update.message.from_user
        await update.message.reply_text("üìä –§–æ—Ä–º–∏—Ä—É—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedStatistics –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user_stats = processor.advanced_stats.get_user_progress(user.id)
        await update.message.reply_text(user_stats)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ my_stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Exception while handling an update: {context.error}")
    try:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    except:
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ó–ê–ú–ï–ù–ò–¢–ï BOT_TOKEN –ù–ê –í–ê–® –¢–û–ö–ï–ù!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("statistics", statistics))
    application.add_handler(CommandHandler("detailed_stats", detailed_stats))
    application.add_handler(CommandHandler("my_stats", my_stats))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_error_handler(error_handler)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π!")
    print("üìç Tesseract –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()