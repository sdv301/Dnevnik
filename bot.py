import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import cv2
import pytesseract
import pandas as pd
from PIL import Image
import io
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE = "trading_results.xlsx"
BOT_TOKEN = "7870831167:AAEfFVkPa4bavSwdg-8wwZxuh6X9IRX0Mfs"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!

class TradingDataProcessor:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self._init_excel_file()
    
    def _init_excel_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.excel_file):
            df = pd.DataFrame(columns=[
                'date_processed', 'user_id', 'username',
                'symbol', 'operation_type', 'volume',
                'entry_price', 'exit_price', 'profit_currency',
                'profit_percent', 'sl_price', 'tp_price',
                'swap', 'commission', 'order_id',
                'entry_time', 'exit_time', 'raw_text'
            ])
            df.to_excel(self.excel_file, index=False)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {self.excel_file}")
    
    def extract_trading_data_from_image(self, image_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
        try:
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {image_path}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = cv2.imread(image_path)
            if img is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ grayscale
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
            gray = cv2.medianBlur(gray, 3)
            gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º (–¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤)
            print("üìñ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Tesseract...")
            text = pytesseract.image_to_string(gray, lang='eng')
            print(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            trading_data = self._parse_trading_data(text)
            
            return {
                'raw_text': text,
                'trading_data': trading_data,
                'clean_text': self._clean_text(text)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _parse_trading_data(self, text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        data = {
            'symbol': '',
            'operation_type': '', 
            'volume': 0,
            'entry_price': 0,
            'exit_price': 0,
            'profit_currency': 0,  # –ü—Ä–∏–±—ã–ª—å –≤ –≤–∞–ª—é—Ç–µ
            'profit_pips': 0,
            'profit_percent': 0,
            'sl_price': 0,
            'tp_price': 0,
            'swap': 0,
            'commission': 0,
            'order_id': '',
            'entry_time': '',
            'exit_time': ''
        }
        
        try:
            lines = text.split('\n')
            
            for i, line in enumerate(lines):
                line_clean = line.strip()
                
                # –ü–æ–∏—Å–∫ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞–ª—é—Ç–µ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
                if data['profit_currency'] == 0:
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–µ–Ω–µ–∂–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏: –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –∑–Ω–∞–∫–∞–º–∏ –≤–∞–ª—é—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                    currency_profit_match = re.search(r'[-]?\d+\.?\d*\s*\$|[-]?\d+\.?\d*\s*USD|[-]?\d+\.?\d*\s*‚Ç¨|[-]?\d+\.?\d*\s*EUR', line_clean)
                    if currency_profit_match:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å
                        profit_value = re.search(r'[-]?\d+\.?\d*', currency_profit_match.group())
                        if profit_value:
                            data['profit_currency'] = float(profit_value.group())
                    else:
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
                        numbers_in_line = re.findall(r'[-]?\d+\.?\d*', line_clean)
                        if len(numbers_in_line) >= 3:  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª
                            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                            potential_profit = numbers_in_line[-1]
                            try:
                                profit_val = float(potential_profit)
                                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ (–Ω–µ —Ü–µ–Ω—ã, –Ω–µ –æ–±—ä–µ–º—ã)
                                if -1000 <= profit_val <= 1000 and profit_val != 0:
                                    data['profit_currency'] = profit_val
                            except:
                                pass
                        
                # –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞ (EURUSD, GBPUSD –∏ —Ç.–¥.)
                if not data['symbol']:
                    symbol_match = re.search(r'\b([A-Z]{6})\b', line_clean)
                    if symbol_match:
                        data['symbol'] = symbol_match.group(1)
                
                # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (Sell/Buy)
                if not data['operation_type']:
                    if 'Sell' in line_clean or 'sell' in line_clean:
                        data['operation_type'] = 'Sell'
                    elif 'Buy' in line_clean or 'buy' in line_clean:
                        data['operation_type'] = 'Buy'
                
                # –ü–æ–∏—Å–∫ –æ–±—ä–µ–º–∞
                if data['volume'] == 0:
                    volume_match = re.search(r'\b(\d+)\s*(lot|–ª–æ—Ç)?\b', line_clean, re.IGNORECASE)
                    if volume_match:
                        data['volume'] = float(volume_match.group(1))
                
                # –ü–æ–∏—Å–∫ —Ü–µ–Ω –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
                price_pattern = r'\d+\.\d{5}'
                prices = re.findall(price_pattern, line_clean)
                
                if len(prices) >= 2:
                    if data['entry_price'] == 0:
                        data['entry_price'] = float(prices[0])
                    if data['exit_price'] == 0:
                        data['exit_price'] = float(prices[1])
                
                # –ü–æ–∏—Å–∫ SL –∏ TP
                if 'S/L:' in line_clean or 'SL:' in line_clean:
                    sl_prices = re.findall(price_pattern, line_clean)
                    if sl_prices:
                        data['sl_price'] = float(sl_prices[0])
                
                if 'T/P:' in line_clean or 'TP:' in line_clean:
                    tp_prices = re.findall(price_pattern, line_clean)
                    if tp_prices:
                        data['tp_price'] = float(tp_prices[0])
                
                # –ü–æ–∏—Å–∫ —Å–≤–æ–ø–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏
                if '–°–≤–æ–ø:' in line_clean or 'Swap:' in line_clean:
                    swap_match = re.search(r'[-]?\d+\.?\d*', line_clean)
                    if swap_match:
                        data['swap'] = float(swap_match.group())
                
                if '–ö–æ–º–∏—Å—Å–∏—è:' in line_clean or 'Commission:' in line_clean:
                    commission_match = re.search(r'[-]?\d+\.?\d*', line_clean)
                    if commission_match:
                        data['commission'] = float(commission_match.group())
                
                # –ü–æ–∏—Å–∫ ID –æ—Ä–¥–µ—Ä–∞
                if not data['order_id']:
                    order_match = re.search(r'#(\d+)', line_clean)
                    if order_match:
                        data['order_id'] = order_match.group(1)
                
                # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏
                time_pattern = r'\d{4}\.\d{2}\.\d{2}\s+\d{2}:\d{2}:\d{2}'
                times = re.findall(time_pattern, line_clean)
                if len(times) >= 2:
                    data['entry_time'] = times[0]
                    data['exit_time'] = times[1]
                elif len(times) == 1 and not data['entry_time']:
                    data['entry_time'] = times[0]
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –ø–∏–ø—Å–∞—Ö
            if data['entry_price'] > 0 and data['exit_price'] > 0:
                if data['operation_type'] == 'Sell':
                    data['profit_pips'] = round((data['entry_price'] - data['exit_price']) * 10000, 1)
                else:  # Buy
                    data['profit_pips'] = round((data['exit_price'] - data['entry_price']) * 10000, 1)
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                data['profit_percent'] = round((data['profit_pips'] / data['entry_price'] * 10000) * 100, 4)
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return data
    
    def _clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        text = ' '.join(text.split())
        return text[:1000]
    
    def save_to_excel(self, data, user_info):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        try:
            df = pd.read_excel(self.excel_file)
            
            trading_data = data['trading_data']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_row = {
                'date_processed': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'user_id': user_info['id'],
                'username': user_info.get('username', 'Unknown'),
                'symbol': trading_data['symbol'],
                'operation_type': trading_data['operation_type'],
                'volume': trading_data['volume'],
                'entry_price': trading_data['entry_price'],
                'exit_price': trading_data['exit_price'],
                'profit_currency': trading_data['profit_currency'],  # –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
                'profit_pips': trading_data['profit_pips'],
                'profit_percent': trading_data['profit_percent'],
                'sl_price': trading_data['sl_price'],
                'tp_price': trading_data['tp_price'],
                'swap': trading_data['swap'],
                'commission': trading_data['commission'],
                'order_id': trading_data['order_id'],
                'entry_time': trading_data['entry_time'],
                'exit_time': trading_data['exit_time'],
                'raw_text': data['clean_text']
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_excel(self.excel_file, index=False)
            print(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
processor = TradingDataProcessor(EXCEL_FILE)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤!

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏ —è:
‚Ä¢ –ò–∑–≤–ª–µ–∫—É —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Tesseract OCR
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é —Å–∏–º–≤–æ–ª, —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ü–µ–Ω—ã, SL/TP
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –≤—Å—ë –≤ Excel —Ç–∞–±–ª–∏—Ü—É

üìä –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/statistics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
/help - –ø–æ–º–æ—â—å

üí° –ü—Ä–∏–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–¥–µ–ª–æ–∫ Forex
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
‚Ä¢ –û—Ä–¥–µ—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/statistics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–æ—Ç—É –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤ Excel

üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ (EURUSD, GBPUSD –∏ —Ç.–¥.)
‚Ä¢ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (Buy/Sell)
‚Ä¢ –û–±—ä–µ–º (–ª–æ—Ç—ã)
‚Ä¢ –¶–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
‚Ä¢ Stop Loss –∏ Take Profit
‚Ä¢ –°–≤–æ–ø –∏ –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    await update.message.reply_text(help_text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    try:
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        temp_file = f"temp_trade_{update.message.message_id}.jpg"
        await photo_file.download_to_drive(temp_file)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        extracted_data = processor.extract_trading_data_from_image(temp_file)
        
        if not extracted_data:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            if os.path.exists(temp_file):
                os.remove(temp_file)
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        user = update.message.from_user
        user_info = {'id': user.id, 'username': user.username or user.first_name}
        success = processor.save_to_excel(extracted_data, user_info)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if success:
            td = extracted_data['trading_data']
            response = f"""
‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!

üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –°–∏–º–≤–æ–ª: {td['symbol'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è: {td['operation_type'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}
‚Ä¢ –û–±—ä–µ–º: {td['volume'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'} –ª–æ—Ç(–æ–≤)
‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {td['entry_price'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}
‚Ä¢ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {td['exit_price'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {td['profit_currency'] or '0'} USD

üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel —Ç–∞–±–ª–∏—Ü—É.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /statistics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
            """
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel."
        
        await processing_msg.edit_text(response)
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(temp_file):
            os.remove(temp_file)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")

async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        df = pd.read_excel(EXCEL_FILE)
        
        if df.empty:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        total_operations = len(df)
        profitable_operations = len(df[df['profit_currency'] > 0])
        total_profit_currency = df['profit_currency'].sum()
        avg_profit_per_trade = df['profit_currency'].mean()
        
        response = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô:

üìà –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_operations}
üìâ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {total_operations - profitable_operations}

üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit_currency:.2f} USD
üìä –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ —Å–¥–µ–ª–∫—É: {avg_profit_per_trade:.2f} USD

üíπ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(profitable_operations/total_operations*100):.1f}%
        """
        await update.message.reply_text(response)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ statistics: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Exception while handling an update: {context.error}")
    try:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    except:
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ó–ê–ú–ï–ù–ò–¢–ï BOT_TOKEN –ù–ê –í–ê–® –¢–û–ö–ï–ù!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("statistics", statistics))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_error_handler(error_handler)
    
    print("ü§ñ –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    print("üìç Tesseract –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìä Excel —Ñ–∞–π–ª: trading_results.xlsx")
    application.run_polling()

if __name__ == '__main__':
    main()