import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import cv2
import pytesseract
import pandas as pd
from PIL import Image
import io
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE = "data_results.xlsx"
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!

class DataProcessor:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self._init_excel_file()
    
    def _init_excel_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
        if not os.path.exists(self.excel_file):
            df = pd.DataFrame(columns=[
                'date', 'user_id', 'username', 
                'numbers', 'scores', 'text_data',
                'best_score', 'worst_score', 'average_score'
            ])
            df.to_excel(self.excel_file, index=False)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª: {self.excel_file}")
    
    def extract_data_from_image(self, image_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
        try:
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = cv2.imread(image_path)
            if img is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ grayscale
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
            gray = cv2.medianBlur(gray, 3)
            gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            processed_path = "processed_" + os.path.basename(image_path)
            cv2.imwrite(processed_path, gray)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {processed_path}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏
            print("üìñ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Tesseract...")
            text = pytesseract.image_to_string(gray, lang='rus+eng')
            print(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ
            numbers = re.findall(r'\d+\.?\d*', text)
            print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª: {numbers}")
            
            # –ü–æ–∏—Å–∫ –æ—Ü–µ–Ω–æ–∫/–±–∞–ª–ª–æ–≤
            scores = []
            for num in numbers:
                try:
                    score = float(num)
                    if 0 <= score <= 100:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 0 –¥–æ 100
                        scores.append(score)
                except:
                    continue
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {scores}")
            
            return {
                'text': text,
                'numbers': numbers,
                'scores': scores,
                'clean_text': self._clean_text(text)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        text = ' '.join(text.split())
        return text[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Excel
    
    def _is_likely_score(self, number_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–µ –ª–∏ —á–∏—Å–ª–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É/–±–∞–ª–ª"""
        try:
            num = float(number_str)
            return 0 <= num <= 100
        except:
            return False
    
    def save_to_excel(self, data, user_info):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        try:
            # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
            df = pd.read_excel(self.excel_file)
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
            scores = data['scores']
            best_score = max(scores) if scores else 0
            worst_score = min(scores) if scores else 0
            average_score = sum(scores) / len(scores) if scores else 0
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_row = {
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'user_id': user_info['id'],
                'username': user_info.get('username', 'Unknown'),
                'numbers': str(data['numbers']),
                'scores': str(data['scores']),
                'text_data': data['clean_text'],
                'best_score': best_score,
                'worst_score': worst_score,
                'average_score': round(average_score, 2)
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            df.to_excel(self.excel_file, index=False)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {e}")
            return False
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            df = pd.read_excel(self.excel_file)
            
            if df.empty:
                return "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º
            total_records = len(df)
            
            # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
            best_scores = df['best_score'].dropna()
            worst_scores = df['worst_score'].dropna()
            avg_scores = df['average_score'].dropna()
            
            if best_scores.empty:
                return "üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            
            overall_best = best_scores.max()
            overall_worst = worst_scores.min() if not worst_scores.empty else 0
            overall_avg = avg_scores.mean() if not avg_scores.empty else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_stats = df.groupby('username').agg({
                'best_score': 'max',
                'worst_score': 'min', 
                'average_score': 'mean',
                'user_id': 'count'
            }).round(2)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = f"""
üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_stats)}

üèÜ –õ–£–ß–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {overall_best}
‚Ä¢ –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {overall_worst}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {overall_avg:.2f}

üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
"""
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for username, stats in user_stats.iterrows():
                response += f"\n{username}:"
                response += f"\n  üèÜ –õ—É—á—à–∏–π: {stats['best_score']}"
                response += f"\n  üìâ –•—É–¥—à–∏–π: {stats['worst_score']}"
                response += f"\n  üìä –°—Ä–µ–¥–Ω–∏–π: {stats['average_score']:.2f}"
                response += f"\n  üìù –ó–∞–ø–∏—Å–µ–π: {stats['user_id']}\n"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
processor = DataProcessor(EXCEL_FILE)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤!

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏ —è:
‚Ä¢ –ò–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR
‚Ä¢ –ù–∞–π–¥—É —á–∏—Å–ª–∞ –∏ –æ—Ü–µ–Ω–∫–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –≤—Å—ë –≤ Excel —Ç–∞–±–ª–∏—Ü—É

üìä –ö–æ–º–∞–Ω–¥—ã:
/statistics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - –ø–æ–º–æ—â—å

üéØ –ü—Ä–∏–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
‚Ä¢ –¢–∞–±–ª–∏—Ü—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏
‚Ä¢ –õ—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —á–∏—Å–ª–∞–º–∏
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/statistics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –æ—Ü–µ–Ω–∫–∞–º–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤)
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–æ—Ç—É –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º
‚Ä¢ –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ–º
‚Ä¢ –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    await update.message.reply_text(help_text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_file = f"temp_photo_{update.message.message_id}.jpg"
        await photo_file.download_to_drive(temp_file)
        
        print(f"üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_file}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Tesseract
        extracted_data = processor.extract_data_from_image(temp_file)
        
        if not extracted_data:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç.")
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(temp_file):
                os.remove(temp_file)
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = update.message.from_user
        user_info = {
            'id': user.id,
            'username': user.username or user.first_name
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        success = processor.save_to_excel(extracted_data, user_info)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if success:
            scores_text = ", ".join(map(str, extracted_data['scores'])) if extracted_data['scores'] else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            response = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!

üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª: {len(extracted_data['numbers'])}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {len(extracted_data['scores'])}
‚Ä¢ –û—Ü–µ–Ω–∫–∏: {scores_text}

üìù –¢–µ–∫—Å—Ç: 
{extracted_data['clean_text'][:150] + '...' if len(extracted_data['clean_text']) > 150 else extracted_data['clean_text']}

üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel —Ç–∞–±–ª–∏—Ü—É.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /statistics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
            """
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel."
        
        await processing_msg.edit_text(response)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        processed_file = "processed_temp_photo_" + str(update.message.message_id) + ".jpg"
        if os.path.exists(processed_file):
            os.remove(processed_file)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        except:
            pass

async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistics"""
    try:
        await update.message.reply_text("üìä –°—á–∏—Ç–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        stats = processor.get_statistics()
        await update.message.reply_text(stats)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ statistics: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Exception while handling an update: {context.error}")
    
    try:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    except:
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ó–ê–ú–ï–ù–ò–¢–ï BOT_TOKEN –ù–ê –í–ê–® –¢–û–ö–ï–ù!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("statistics", statistics))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üìç Tesseract –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìä Excel —Ñ–∞–π–ª: data_results.xlsx")
    application.run_polling()

if __name__ == '__main__':
    main()