import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
import os

class AdvancedStatistics:
    def __init__(self, excel_file):
        self.excel_file = excel_file
    
    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            df = pd.read_excel(self.excel_file)
            
            if df.empty:
                return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            all_scores = []
            user_stats = {}
            
            for _, row in df.iterrows():
                user_id = row['user_id']
                username = row['username']
                
                try:
                    scores = eval(row['scores'])
                    if isinstance(scores, list) and scores:
                        if user_id not in user_stats:
                            user_stats[user_id] = {
                                'username': username,
                                'scores': [],
                                'count': 0
                            }
                        
                        user_stats[user_id]['scores'].extend(scores)
                        user_stats[user_id]['count'] += 1
                        all_scores.extend(scores)
                except:
                    continue
            
            if not all_scores:
                return "üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = "üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n\n"
            report += f"üìà –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(all_scores)}\n"
            report += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_stats)}\n"
            report += f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(all_scores):.1f}\n"
            report += f"üìâ –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {min(all_scores):.1f}\n"
            report += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sum(all_scores)/len(all_scores):.1f}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            report += "üë§ –†–ï–ô–¢–ò–ù–ì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n"
            user_best_scores = []
            
            for user_id, data in user_stats.items():
                if data['scores']:
                    best_score = max(data['scores'])
                    worst_score = min(data['scores'])
                    avg_score = sum(data['scores']) / len(data['scores'])
                    user_best_scores.append((data['username'], best_score, avg_score, worst_score, len(data['scores'])))
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            user_best_scores.sort(key=lambda x: x[1], reverse=True)
            
            for i, (username, best, avg, worst, count) in enumerate(user_best_scores[:10], 1):
                report += f"{i}. {username}:\n"
                report += f"   üèÜ –õ—É—á—à–∏–π: {best:.1f}\n"
                report += f"   üìä –°—Ä–µ–¥–Ω–∏–π: {avg:.1f}\n"
                report += f"   üìâ –•—É–¥—à–∏–π: {worst:.1f}\n"
                report += f"   üìù –ó–∞–ø–∏—Å–µ–π: {count}\n\n"
            
            return report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

    def create_score_distribution_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫"""
        try:
            df = pd.read_excel(self.excel_file)
            
            if df.empty:
                return None
            
            # –°–±–æ—Ä –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫
            all_scores = []
            for _, row in df.iterrows():
                try:
                    scores = eval(row['scores'])
                    if isinstance(scores, list):
                        all_scores.extend(scores)
                except:
                    continue
            
            if not all_scores:
                return None
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(10, 6))
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
            plt.hist(all_scores, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
            plt.xlabel('–û—Ü–µ–Ω–∫–∏')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫')
            plt.grid(True, alpha=0.3)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            chart_path = "score_distribution.png"
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return chart_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None

    def get_user_progress(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            df = pd.read_excel(self.excel_file)
            
            if df.empty:
                return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
            
            user_data = df[df['user_id'] == user_id]
            
            if user_data.empty:
                return "üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            all_scores = []
            dates = []
            
            for _, row in user_data.iterrows():
                try:
                    scores = eval(row['scores'])
                    if isinstance(scores, list) and scores:
                        all_scores.extend(scores)
                        dates.append(row['date'])
                except:
                    continue
            
            if not all_scores:
                return "üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
            best_score = max(all_scores)
            worst_score = min(all_scores)
            avg_score = sum(all_scores) / len(all_scores)
            total_records = len(user_data)
            
            progress_report = f"""
üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score:.1f}
üìâ –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {worst_score:.1f}
üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_score:.1f}
üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}
üéØ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(all_scores)}

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {'üìà' if len(all_scores) > 1 and all_scores[-1] >= avg_score else 'üìâ'}
            """
            
            return progress_report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"