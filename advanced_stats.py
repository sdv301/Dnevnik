import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

class TradingAdvancedStatistics:
    def __init__(self, excel_file):
        self.excel_file = excel_file
    
    def generate_trading_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            df = pd.read_excel(self.excel_file)
            
            if df.empty:
                return "üìä –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = len(df)
            profitable_trades = len(df[df['profit_pips'] > 0])
            losing_trades = len(df[df['profit_pips'] < 0])
            total_profit = df['profit_pips'].sum()
            avg_profit = df['profit_pips'].mean()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbol_stats = df.groupby('symbol').agg({
                'profit_pips': ['count', 'sum', 'mean'],
                'volume': 'sum'
            }).round(2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
            operation_stats = df.groupby('operation_type').agg({
                'profit_pips': ['count', 'sum', 'mean']
            }).round(2)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = "üìä –î–ï–¢–ê–õ–¨–ù–´–ô –¢–û–†–ì–û–í–´–ô –û–¢–ß–ï–¢\n\n"
            report += f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
            report += f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades}\n"
            report += f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades}\n"
            report += f"üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.1f} –ø–∏–ø—Å–æ–≤\n"
            report += f"üìä –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {avg_profit:.1f} –ø–∏–ø—Å–æ–≤\n"
            report += f"üíπ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(profitable_trades/total_trades*100):.1f}%\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            report += "üí± –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:\n"
            for symbol in symbol_stats.index:
                stats = symbol_stats.loc[symbol]
                count = stats[('profit_pips', 'count')]
                total = stats[('profit_pips', 'sum')]
                avg = stats[('profit_pips', 'mean')]
                volume = stats[('volume', 'sum')]
                
                report += f"\n{symbol}:\n"
                report += f"   üìä –°–¥–µ–ª–æ–∫: {count}\n"
                report += f"   üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total:.1f} –ø–∏–ø—Å–æ–≤\n"
                report += f"   üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {avg:.1f} –ø–∏–ø—Å–æ–≤\n"
                report += f"   üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {volume} –ª–æ—Ç–æ–≤\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
            report += "\nüîÑ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–ü–ï–†–ê–¶–ò–Ø–ú:\n"
            for op_type in operation_stats.index:
                stats = operation_stats.loc[op_type]
                count = stats[('profit_pips', 'count')]
                total = stats[('profit_pips', 'sum')]
                avg = stats[('profit_pips', 'mean')]
                
                report += f"\n{op_type}:\n"
                report += f"   üìä –°–¥–µ–ª–æ–∫: {count}\n"
                report += f"   üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total:.1f} –ø–∏–ø—Å–æ–≤\n"
                report += f"   üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {avg:.1f} –ø–∏–ø—Å–æ–≤\n"
            
            return report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

    def get_user_trading_stats(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            df = pd.read_excel(self.excel_file)
            
            if df.empty:
                return "üìä –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
            
            user_data = df[df['user_id'] == user_id]
            
            if user_data.empty:
                return "üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            total_trades = len(user_data)
            profitable_trades = len(user_data[user_data['profit_pips'] > 0])
            total_profit = user_data['profit_pips'].sum()
            avg_profit = user_data['profit_pips'].mean()
            
            # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
            best_trade = user_data.loc[user_data['profit_pips'].idxmax()]
            worst_trade = user_data.loc[user_data['profit_pips'].idxmin()]
            
            progress_report = f"""
üìä –í–ê–®–ê –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades}
‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {total_trades - profitable_trades}

üí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.1f} –ø–∏–ø—Å–æ–≤
üìä –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {avg_profit:.1f} –ø–∏–ø—Å–æ–≤
üíπ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(profitable_trades/total_trades*100):.1f}%

üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:
   –°–∏–º–≤–æ–ª: {best_trade['symbol']}
   –ü—Ä–æ—Ñ–∏—Ç: {best_trade['profit_pips']} –ø–∏–ø—Å–æ–≤

üìâ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:
   –°–∏–º–≤–æ–ª: {worst_trade['symbol']}
   –ü—Ä–æ—Ñ–∏—Ç: {worst_trade['profit_pips']} –ø–∏–ø—Å–æ–≤
            """
            
            return progress_report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"